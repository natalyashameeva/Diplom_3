{"name": "test_order_in_progress[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (1068, 87). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\n  (Session info: chrome=131.0.6778.86)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7C6C46CB5+28821]\n\t(No symbol) [0x00007FF7C6BB3840]\n\t(No symbol) [0x00007FF7C6A5578A]\n\t(No symbol) [0x00007FF7C6AB0E8E]\n\t(No symbol) [0x00007FF7C6AAE92C]\n\t(No symbol) [0x00007FF7C6AABAF6]\n\t(No symbol) [0x00007FF7C6AAAA51]\n\t(No symbol) [0x00007FF7C6A9CBA0]\n\t(No symbol) [0x00007FF7C6ACF2FA]\n\t(No symbol) [0x00007FF7C6A9C3F6]\n\t(No symbol) [0x00007FF7C6ACF510]\n\t(No symbol) [0x00007FF7C6AEF412]\n\t(No symbol) [0x00007FF7C6ACF0A3]\n\t(No symbol) [0x00007FF7C6A9A778]\n\t(No symbol) [0x00007FF7C6A9B8E1]\n\tGetHandleVerifier [0x00007FF7C6F7FCAD+3408013]\n\tGetHandleVerifier [0x00007FF7C6F9741F+3504127]\n\tGetHandleVerifier [0x00007FF7C6F8B5FD+3455453]\n\tGetHandleVerifier [0x00007FF7C6D0BDBB+835995]\n\t(No symbol) [0x00007FF7C6BBEB5F]\n\t(No symbol) [0x00007FF7C6BBA814]\n\t(No symbol) [0x00007FF7C6BBA9AD]\n\t(No symbol) [0x00007FF7C6BAA199]\n\tBaseThreadInitThunk [0x00007FFBD12C7614+20]\n\tRtlUserThreadStart [0x00007FFBD23026A1+33]", "trace": "self = <test_order_feed.TestOrderFeed object at 0x000002220AB204D0>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b05a992dca5399d549fcb9c2d5301346\")>\nbase_url = 'https://stellarburgers.nomoreparties.site'\n\n    def test_order_in_progress(self, browser, base_url):\n        # Проверяет, что номер нового заказа появляется в разделе В работе\n        browser.get(base_url)\n        page = OrderFeedPage(browser)\n    \n        # Создаём новый заказ\n        page.create_order()\n        main_page = MainPage(browser)\n        main_page.close_overlay()\n>       main_page.close_modal()\n\ntests\\test_order_feed.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects\\main_page.py:34: in close_modal\n    close_button.click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002220B068110>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF7C6BAA199]\\\\n\\\\tBaseThreadInitThunk [0x00007FFBD12C7614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFBD23026A1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (1068, 87). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\nE         (Session info: chrome=131.0.6778.86)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7C6C46CB5+28821]\nE       \t(No symbol) [0x00007FF7C6BB3840]\nE       \t(No symbol) [0x00007FF7C6A5578A]\nE       \t(No symbol) [0x00007FF7C6AB0E8E]\nE       \t(No symbol) [0x00007FF7C6AAE92C]\nE       \t(No symbol) [0x00007FF7C6AABAF6]\nE       \t(No symbol) [0x00007FF7C6AAAA51]\nE       \t(No symbol) [0x00007FF7C6A9CBA0]\nE       \t(No symbol) [0x00007FF7C6ACF2FA]\nE       \t(No symbol) [0x00007FF7C6A9C3F6]\nE       \t(No symbol) [0x00007FF7C6ACF510]\nE       \t(No symbol) [0x00007FF7C6AEF412]\nE       \t(No symbol) [0x00007FF7C6ACF0A3]\nE       \t(No symbol) [0x00007FF7C6A9A778]\nE       \t(No symbol) [0x00007FF7C6A9B8E1]\nE       \tGetHandleVerifier [0x00007FF7C6F7FCAD+3408013]\nE       \tGetHandleVerifier [0x00007FF7C6F9741F+3504127]\nE       \tGetHandleVerifier [0x00007FF7C6F8B5FD+3455453]\nE       \tGetHandleVerifier [0x00007FF7C6D0BDBB+835995]\nE       \t(No symbol) [0x00007FF7C6BBEB5F]\nE       \t(No symbol) [0x00007FF7C6BBA814]\nE       \t(No symbol) [0x00007FF7C6BBA9AD]\nE       \t(No symbol) [0x00007FF7C6BAA199]\nE       \tBaseThreadInitThunk [0x00007FFBD12C7614+20]\nE       \tRtlUserThreadStart [0x00007FFBD23026A1+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "stdout", "source": "3a68ac45-3ac8-4647-88cc-54623dd27507-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "browser", "value": "'chrome'"}], "start": 1733243742583, "stop": 1733243746398, "uuid": "d35409c8-2cf3-4f6b-90d7-5b0f832dba39", "historyId": "1371006384a94e07753a70d1d0a000fa", "testCaseId": "db22de7e6445bc8b783ef3182ac18fe0", "fullName": "tests.test_order_feed.TestOrderFeed#test_order_in_progress", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('create_test_user', 'browser', 'base_url')"}, {"name": "tag", "value": "nondestructive"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_feed"}, {"name": "subSuite", "value": "TestOrderFeed"}, {"name": "host", "value": "WIN-UP492E7L1GQ"}, {"name": "thread", "value": "13460-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_feed"}]}